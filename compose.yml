# Define persistent storage volumes
volumes:
  companies_registry_db_data:
    driver: local
  companies_registry_database_data:
    driver: local    

# Define network for service communication
networks:
  companies_registry_database_network:
    name: ${PROJECT_NAME:-companies-registry}-database
    driver: bridge

# Service definitions
services:
  # PostgreSQL database service
  companies_registry_database:
    image: postgres:16
    container_name: ${PROJECT_NAME:-companies-registry}_database
    restart: on-failure
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"  # Map container port to host
    volumes:
      - companies_registry_database_data:/var/lib/postgresql/data  # Persist database data
      - ./data/synthetic/companies_registry_db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro  # Database initialization script
    networks:
      - companies_registry_database_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # Data ingestion service
  ingest_companies_registry_database:
    build:
      context: ./services/ingest_companies_registry_database
      dockerfile: Dockerfile
    image: ingest-${PROJECT_NAME:-companies-registry}-image
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}  # Use database service name for connection
    volumes:
      - ./data/ingestion:/app/data/ingestion:rw  # Mount ingestion data directory
    networks:
      - companies_registry_database_network
    depends_on:
      companies_registry_database:
        condition: service_healthy

  # Analytics service (Apache Superset)
  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      args:
        SUPERSET_HOME: ${SUPERSET_HOME}
        SUPERSET_PORT: ${SUPERSET_PORT}
        SUPERSET_DASHBOARD: ${SUPERSET_DASHBOARD}
    image: ${PROJECT_NAME:-companies-registry}-analytics-image
    container_name: ${PROJECT_NAME:-companies-registry}-analytics
    restart: unless-stopped
    environment:
      FLASK_APP: superset
      FLASK_ENV: ${FLASK_ENV}
      SUPERSET_ENV: ${SUPERSET_ENV}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES}
      SUPERSET_PORT: ${SUPERSET_PORT}
      SUPERSET_HOME: /app/superset_home
      SUPERSET_DASHBOARD: /app/assets
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      ADMIN_USERNAME: ${SUPERSET_ADMIN_USER}
      ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
    volumes:
      - ./services/analytics/superset_home:${SUPERSET_HOME}:rw  # Superset configuration and data
      - ./services/analytics/assets:${SUPERSET_DASHBOARD}:ro    # Dashboard configurations
      - ./data/transformations:/app/data/transformations:rw     # Transformed data access
    ports:
      - "${SUPERSET_PORT:-8088}:8088"  # Expose Superset web interface

  # Data transformations service (dbt)
  transformations:
    build:
      context: ./services/transformations
      dockerfile: Dockerfile
    image: ${PROJECT_NAME:-companies-registry}-transformations-image
    container_name: ${PROJECT_NAME:-companies-registry}-transformations
    environment:
      - DBT_DATAWAREHOUSE_DB=${DBT_DATAWAREHOUSE_DB}  # Target database for transformations
      - DBT_SOURCE_COMPANIES_REGISTRY_PARQUET_EXPORT=${DBT_SOURCE_COMPANIES_REGISTRY_PARQUET_EXPORT}
      - DBT_SOURCE_PEPS_PARQUET_EXPORT=${DBT_SOURCE_PEPS_PARQUET_EXPORT}
      - DBT_SOURCE_RISKY_LOCATIONS_PARQUET_EXPORT=${DBT_SOURCE_RISKY_LOCATIONS_PARQUET_EXPORT}
    volumes:
      - ./data/ingestion:/app/data/ingestion:ro          # Read access to raw data
      - ./data/transformations:/app/data/transformations:rw  # Write access for transformed data 