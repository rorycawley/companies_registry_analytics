volumes:
  companies_registry_db_data:
    driver: local
  companies_registry_database_data:
    driver: local    

networks:
  companies_registry_database_network:
    name: ${PROJECT_NAME:-companies-registry}-database
    driver: bridge



services:
  companies_registry_database:
    init: true
    image: postgres:16
    container_name: ${PROJECT_NAME:-companies-registry}_database
    restart: on-failure
    logging:
      options:
        max-size: "10m"
        max-file: "3"    
    shm_size: '256mb'
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata  # Explicit data directory
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}  # Required for external connections
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - companies_registry_database_data:/var/lib/postgresql/data
      - ./data/synthetic/companies_registry_db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    depends_on: []    
    cap_drop:
      - ALL    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      start_period: 30s 
      interval: 5s
      timeout: 5s
      retries: 10
    tmpfs:
      - /tmp
    user: postgres
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
    networks:
      - companies_registry_database_network
    security_opt:
      - no-new-privileges:true

  ingest_companies_registry:
        init: true
        restart: no
        container_name: ${PROJECT_NAME:-companies-registry}_ingest
        build:
          context: ./services/ingest_companies_registry
          dockerfile: Dockerfile
        image: ${PROJECT_NAME:-companies-registry}-ingest-image
        environment:
          - POSTGRES_USER=${POSTGRES_USER}
          - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          - POSTGRES_DB=${POSTGRES_DB}
          - POSTGRES_PORT=${POSTGRES_PORT}
          - POSTGRES_HOST=companies_registry_database
        volumes:
          - ./data/ingestion:/app/data/ingestion:rw
        networks:
          - companies_registry_database_network
        depends_on:
          companies_registry_database:
            condition: service_healthy
        tmpfs:
          - /tmp
        cap_drop:
          - ALL
        security_opt:
          - no-new-privileges:true
        logging:
          options:
            max-size: "10m"
            max-file: "3"

  analytics:
    init: true
    read_only: true    # Makes the root filesystem read-only
    logging:
      options:
        max-size: "10m"
        max-file: "3"    
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      args:
        SUPERSET_HOME: ${SUPERSET_HOME}
        SUPERSET_PORT: ${SUPERSET_PORT}
        SUPERSET_DASHBOARD: ${SUPERSET_DASHBOARD}
    image: ${PROJECT_NAME:-companies-registry}-analytics-image
    container_name: ${PROJECT_NAME:-companies-registry}-analytics
    restart: unless-stopped
    shm_size: '256mb'
    user: superset
    environment:
      FLASK_APP: superset
      FLASK_ENV: ${FLASK_ENV}
      SUPERSET_ENV: ${SUPERSET_ENV}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES}
      SUPERSET_PORT: ${SUPERSET_PORT}
      SUPERSET_TIMEOUT: ${SUPERSET_TIMEOUT}
      SUPERSET_HOME: /app/superset_home
      SUPERSET_DASHBOARD: /app/config
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      PREVENT_UNSAFE_DB_CONNECTIONS: ${PREVENT_UNSAFE_DB_CONNECTIONS}
      ENABLE_TEMPLATE_PROCESSING: ${ENABLE_TEMPLATE_PROCESSING}
      ADMIN_USERNAME: ${SUPERSET_ADMIN_USER}
      ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      PYTHONPATH: /app
    volumes:
      - ./services/analytics/superset_home:${SUPERSET_HOME}:rw
      - ./services/analytics/config:${SUPERSET_DASHBOARD}:ro
      - ./data/transformations:/app/data/transformations:rw
      # Add tmpfs mounts for directories that need write access
      - type: tmpfs
        target: /tmp
      - type: tmpfs
        target: /var/run
      - type: tmpfs
        target: /var/log
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M    
    depends_on: []
    ports:
      - "${SUPERSET_PORT:-8088}:8088"
    cap_drop:
      - ALL    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SUPERSET_PORT:-8088}/health"]
      start_period: 30s  
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true

  
  transformations:
    init: true
    logging:
      options:
        max-size: "10m"
        max-file: "3"    
    build:
      context: ./services/transformations
      dockerfile: Dockerfile
    image: ${PROJECT_NAME:-companies-registry}-transformation-image
    container_name: ${PROJECT_NAME:-companies-registry}-transformations
    restart: no
    shm_size: '256mb'
    user: dbtuser
    environment:
      - DBT_DATAWAREHOUSE_DB=${DBT_DATAWAREHOUSE_DB}
      - DBT_SOURCE_COMPANIES_REGISTRY_PARQUET_EXPORT=${DBT_SOURCE_COMPANIES_REGISTRY_PARQUET_EXPORT}
      - DBT_SOURCE_PEPS_PARQUET_EXPORT=${DBT_SOURCE_PEPS_PARQUET_EXPORT}
      - DBT_SOURCE_RISKY_LOCATIONS_PARQUET_EXPORT=${DBT_SOURCE_RISKY_LOCATIONS_PARQUET_EXPORT}
    volumes:
      - ./data/ingestion:/app/data/ingestion:ro
      - ./data/transformation:/app/data/transformation:rw
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
    depends_on: []
    cap_drop:
      - ALL    
    healthcheck:
      test: ["CMD", "dbt", "debug"]
      start_period: 30s       
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true