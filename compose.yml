x-environment: &base-postgres-env
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}

x-project-name: &project-name
  PROJECT_NAME: ${PROJECT_NAME:-companies-registry}

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

volumes:
  companies-registry-database-data:
    driver: local    

networks:
  companies-registry-database-network:
    name: ${PROJECT_NAME:-companies-registry}-database
    driver: bridge

services:
  companies-registry-database:
    image: postgres:16
    container_name: ${PROJECT_NAME:-companies-registry}-database
    restart: on-failure
    environment:
      <<: *base-postgres-env
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - companies-registry-database-data:/var/lib/postgresql/data
      - ./data/synthetic/companies_registry_db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - companies-registry-database-network
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  
  ingest-companies-registry-database:
    build:
      context: ./services/ingest_companies_registry_database
      dockerfile: Dockerfile
    container_name: ingest-${PROJECT_NAME:-companies-registry}
    environment:
      <<: *base-postgres-env
    volumes:
      - ./data/ingestion:/app/data/ingestion:rw
    networks:
      - companies-registry-database-network
    depends_on:
      companies-registry-database:
        condition: service_healthy

  ingest-peps-csv:
    build:
      context: ./services/ingest_peps_csv
      dockerfile: Dockerfile
    container_name: ingest-${PROJECT_NAME:-companies-registry}-peps
    environment: &peps-env
      CSV_FILE_PATH_PEPS: ${CSV_FILE_PATH_PEPS}
      PARQUET_EXPORT_DIR_PEPS: ${PARQUET_EXPORT_DIR_PEPS}
    volumes:
      - ./data/synthetic/peps:/app/data/synthetic/peps:ro
      - ./data/ingestion/peps/parquet_tables:/app/data/ingestion/peps/parquet_tables:rw

  ingest-risky-locations-csv:
    build:
      context: ./services/ingest_risky_locations_csv
      dockerfile: Dockerfile
    container_name: ingest-${PROJECT_NAME:-companies-registry}-risky-locations
    environment: &risky-locations-env
      CSV_FILE_PATH_RISKY_LOCATIONS: ${CSV_FILE_PATH_RISKY_LOCATIONS}
      PARQUET_EXPORT_DIR_RISKY_LOCATIONS: ${PARQUET_EXPORT_DIR_RISKY_LOCATIONS}
    volumes:
      - ./data/synthetic/risky_locations:/app/data/synthetic/risky_locations:ro
      - ./data/ingestion/risky_locations/parquet_tables:/app/data/ingestion/risky_locations/parquet_tables:rw

  transformations:
    build:
      context: ./services/transformations
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-companies-registry}-transformations
    environment: &dbt-env
      DBT_DATAWAREHOUSE_DB: ${DBT_DATAWAREHOUSE_DB}
      DBT_SOURCE_COMPANIES_REGISTRY_PARQUET_EXPORT: ${DBT_SOURCE_COMPANIES_REGISTRY_PARQUET_EXPORT}
      DBT_SOURCE_PEPS_PARQUET_EXPORT: ${DBT_SOURCE_PEPS_PARQUET_EXPORT}
      DBT_SOURCE_RISKY_LOCATIONS_PARQUET_EXPORT: ${DBT_SOURCE_RISKY_LOCATIONS_PARQUET_EXPORT}
    volumes:
      - ./data/ingestion:/app/data/ingestion:ro
      - ./data/transformations:/app/data/transformations:rw

  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      args: &superset-build-args
        SUPERSET_HOME: ${SUPERSET_HOME}
        SUPERSET_PORT: ${SUPERSET_PORT}
        SUPERSET_DASHBOARD: ${SUPERSET_DASHBOARD}
    container_name: ${PROJECT_NAME:-companies-registry}-analytics
    restart: unless-stopped
    environment: &superset-env
      FLASK_APP: superset
      FLASK_ENV: ${FLASK_ENV}
      SUPERSET_ENV: ${SUPERSET_ENV}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES}
      SUPERSET_PORT: ${SUPERSET_PORT}
      SUPERSET_HOME: /app/superset_home
      SUPERSET_DASHBOARD: /app/assets
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      ADMIN_USERNAME: ${SUPERSET_ADMIN_USER}
      ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      SQLALCHEMY_CUSTOM_USER_AGENT:
    volumes:
      - ./services/analytics/superset_home:${SUPERSET_HOME}:rw
      - ./services/analytics/assets:${SUPERSET_DASHBOARD}:ro
      - ./data/transformations:/app/data/transformations:rw
    ports:
      - "${SUPERSET_PORT:-8088}:8088"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "curl -f http://localhost:${SUPERSET_PORT:-8088}/health || exit 1"]